State 10 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: DEF_VARS GLOB_VARS DEF_FUNCS FUNCS MAIN_FUNC

    2 DEF_VARS: DEF_VAR end DEF_VARS
    3         | %empty

    4 DEF_VAR: def var_name EXP

    5 GLOB_VARS: VARS

    6 VARS: VAR end VARS
    7     | %empty

    8 VAR: DECLARE
    9    | REASSIGN

   10 DECLARE: TYPE var_name ASSIGN

   11 ASSIGN: EXP
   12       | %empty

   13 REASSIGN: var_name EXP

   14 EXP: string_var
   15    | int_var
   16    | var_name
   17    | open_par EXP close_par
   18    | OP

   19 OP: EXP add EXP
   20   | EXP sub EXP
   21   | EXP mult EXP
   22   | EXP divi EXP

   23 TYPE: t_string
   24     | t_int

   25 EVALUATE: EXP COMP EXP
   26         | EVALUATE and EVALUATE
   27         | EVALUATE or EVALUATE

   28 COMP: equal
   29     | neq
   30     | bigger
   31     | smaller
   32     | beq
   33     | seq

   34 DEF_FUNCS: DEF_FUNC end DEF_FUNCS
   35          | %empty

   36 DEF_FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par

   37 ALL_ARGS: ARGS
   38         | %empty

   39 ARGS: ARG comma ARGS
   40     | ARG

   41 ARG: TYPE var_name

   42 FUNCS: FUNC FUNCS
   43      | %empty

   44 FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par fuopen BODY fuclose

   45 BODY: LINE BODY
   46     | BLOCK BODY
   47     | %empty

   48 LINE: CMD end

   49 CMD: REASSIGN
   50    | DECLARE
   51    | INC
   52    | DEC
   53    | PRINT
   54    | SCAN
   55    | RET

   56 INC: var_name increase

   57 DEC: var_name decrease

   58 PRINT: t_printf open_par EXP close_par

   59 SCAN: t_scanf open_par var_name close_par

   60 RET: t_ret EXP
   61    | t_ret

   62 BLOCK: IFBLOCK
   63      | WHILEBLOCK

   64 IFBLOCK: open_if EVALUATE end BODY close_if

   65 WHILEBLOCK: open_while EVALUATE end BODY close_while

   66 MAIN_FUNC: main_func TYPE open_par ALL_ARGS close_par fuopen BODY fuclose


Terminals, with rules where they appear

$end (0) 0
error (256)
add (258) 19
sub (259) 20
mult (260) 21
divi (261) 22
t_string (262) 23
t_int (263) 24
def (264) 4
t_scanf (265) 59
t_printf (266) 58
increase (267) 56
decrease (268) 57
open_while (269) 65
close_while (270) 65
open_if (271) 64
close_if (272) 64
and (273) 26
or (274) 27
equal (275) 28
neq (276) 29
seq (277) 33
smaller (278) 31
beq (279) 32
bigger (280) 30
main_func (281) 66
comma (282) 39
close_par (283) 17 36 44 58 59 66
open_par (284) 17 36 44 58 59 66
fuopen (285) 44 66
t_ret (286) 60 61
fuclose (287) 44 66
end (288) 2 6 34 48 64 65
is_fun (289) 36 44
int_var (290) 15
string_var (291) 14
var_name (292) 4 10 13 16 36 41 44 56 57 59


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
PROGRAM (39)
    on left: 1, on right: 0
DEF_VARS (40)
    on left: 2 3, on right: 1 2
DEF_VAR (41)
    on left: 4, on right: 2
GLOB_VARS (42)
    on left: 5, on right: 1
VARS (43)
    on left: 6 7, on right: 5 6
VAR (44)
    on left: 8 9, on right: 6
DECLARE (45)
    on left: 10, on right: 8 50
ASSIGN (46)
    on left: 11 12, on right: 10
REASSIGN (47)
    on left: 13, on right: 9 49
EXP (48)
    on left: 14 15 16 17 18, on right: 4 11 13 17 19 20 21 22 25 58
    60
OP (49)
    on left: 19 20 21 22, on right: 18
TYPE (50)
    on left: 23 24, on right: 10 36 41 44 66
EVALUATE (51)
    on left: 25 26 27, on right: 26 27 64 65
COMP (52)
    on left: 28 29 30 31 32 33, on right: 25
DEF_FUNCS (53)
    on left: 34 35, on right: 1 34
DEF_FUNC (54)
    on left: 36, on right: 34
ALL_ARGS (55)
    on left: 37 38, on right: 36 44 66
ARGS (56)
    on left: 39 40, on right: 37 39
ARG (57)
    on left: 41, on right: 39 40
FUNCS (58)
    on left: 42 43, on right: 1 42
FUNC (59)
    on left: 44, on right: 42
BODY (60)
    on left: 45 46 47, on right: 44 45 46 64 65 66
LINE (61)
    on left: 48, on right: 45
CMD (62)
    on left: 49 50 51 52 53 54 55, on right: 48
INC (63)
    on left: 56, on right: 51
DEC (64)
    on left: 57, on right: 52
PRINT (65)
    on left: 58, on right: 53
SCAN (66)
    on left: 59, on right: 54
RET (67)
    on left: 60 61, on right: 55
BLOCK (68)
    on left: 62 63, on right: 46
IFBLOCK (69)
    on left: 64, on right: 62
WHILEBLOCK (70)
    on left: 65, on right: 63
MAIN_FUNC (71)
    on left: 66, on right: 1


State 0

    0 $accept: . PROGRAM $end

    def  shift, and go to state 1

    $default  reduce using rule 3 (DEF_VARS)

    PROGRAM   go to state 2
    DEF_VARS  go to state 3
    DEF_VAR   go to state 4


State 1

    4 DEF_VAR: def . var_name EXP

    var_name  shift, and go to state 5


State 2

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 6


State 3

    1 PROGRAM: DEF_VARS . GLOB_VARS DEF_FUNCS FUNCS MAIN_FUNC

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8
    var_name  shift, and go to state 9

    $default  reduce using rule 7 (VARS)

    GLOB_VARS  go to state 10
    VARS       go to state 11
    VAR        go to state 12
    DECLARE    go to state 13
    REASSIGN   go to state 14
    TYPE       go to state 15


State 4

    2 DEF_VARS: DEF_VAR . end DEF_VARS

    end  shift, and go to state 16


State 5

    4 DEF_VAR: def var_name . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 21
    OP   go to state 22


State 6

    0 $accept: PROGRAM $end .

    $default  accept


State 7

   23 TYPE: t_string .

    $default  reduce using rule 23 (TYPE)


State 8

   24 TYPE: t_int .

    $default  reduce using rule 24 (TYPE)


State 9

   13 REASSIGN: var_name . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 23
    OP   go to state 22


State 10

    1 PROGRAM: DEF_VARS GLOB_VARS . DEF_FUNCS FUNCS MAIN_FUNC

    is_fun  shift, and go to state 24

    is_fun    [reduce using rule 35 (DEF_FUNCS)]
    $default  reduce using rule 35 (DEF_FUNCS)

    DEF_FUNCS  go to state 25
    DEF_FUNC   go to state 26


State 11

    5 GLOB_VARS: VARS .

    $default  reduce using rule 5 (GLOB_VARS)


State 12

    6 VARS: VAR . end VARS

    end  shift, and go to state 27


State 13

    8 VAR: DECLARE .

    $default  reduce using rule 8 (VAR)


State 14

    9 VAR: REASSIGN .

    $default  reduce using rule 9 (VAR)


State 15

   10 DECLARE: TYPE . var_name ASSIGN

    var_name  shift, and go to state 28


State 16

    2 DEF_VARS: DEF_VAR end . DEF_VARS

    def  shift, and go to state 1

    $default  reduce using rule 3 (DEF_VARS)

    DEF_VARS  go to state 29
    DEF_VAR   go to state 4


State 17

   17 EXP: open_par . EXP close_par

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 30
    OP   go to state 22


State 18

   15 EXP: int_var .

    $default  reduce using rule 15 (EXP)


State 19

   14 EXP: string_var .

    $default  reduce using rule 14 (EXP)


State 20

   16 EXP: var_name .

    $default  reduce using rule 16 (EXP)


State 21

    4 DEF_VAR: def var_name EXP .
   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP

    add   shift, and go to state 31
    sub   shift, and go to state 32
    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 4 (DEF_VAR)


State 22

   18 EXP: OP .

    $default  reduce using rule 18 (EXP)


State 23

   13 REASSIGN: var_name EXP .
   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP

    add   shift, and go to state 31
    sub   shift, and go to state 32
    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 13 (REASSIGN)


State 24

   36 DEF_FUNC: is_fun . var_name TYPE open_par ALL_ARGS close_par

    var_name  shift, and go to state 35


State 25

    1 PROGRAM: DEF_VARS GLOB_VARS DEF_FUNCS . FUNCS MAIN_FUNC

    is_fun  shift, and go to state 36

    $default  reduce using rule 43 (FUNCS)

    FUNCS  go to state 37
    FUNC   go to state 38


State 26

   34 DEF_FUNCS: DEF_FUNC . end DEF_FUNCS

    end  shift, and go to state 39


State 27

    6 VARS: VAR end . VARS

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8
    var_name  shift, and go to state 9

    $default  reduce using rule 7 (VARS)

    VARS      go to state 40
    VAR       go to state 12
    DECLARE   go to state 13
    REASSIGN  go to state 14
    TYPE      go to state 15


State 28

   10 DECLARE: TYPE var_name . ASSIGN

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    $default  reduce using rule 12 (ASSIGN)

    ASSIGN  go to state 41
    EXP     go to state 42
    OP      go to state 22


State 29

    2 DEF_VARS: DEF_VAR end DEF_VARS .

    $default  reduce using rule 2 (DEF_VARS)


State 30

   17 EXP: open_par EXP . close_par
   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP

    add        shift, and go to state 31
    sub        shift, and go to state 32
    mult       shift, and go to state 33
    divi       shift, and go to state 34
    close_par  shift, and go to state 43


State 31

   19 OP: EXP add . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 44
    OP   go to state 22


State 32

   20 OP: EXP sub . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 45
    OP   go to state 22


State 33

   21 OP: EXP mult . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 46
    OP   go to state 22


State 34

   22 OP: EXP divi . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 47
    OP   go to state 22


State 35

   36 DEF_FUNC: is_fun var_name . TYPE open_par ALL_ARGS close_par

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    TYPE  go to state 48


State 36

   44 FUNC: is_fun . var_name TYPE open_par ALL_ARGS close_par fuopen BODY fuclose

    var_name  shift, and go to state 49


State 37

    1 PROGRAM: DEF_VARS GLOB_VARS DEF_FUNCS FUNCS . MAIN_FUNC

    main_func  shift, and go to state 50

    MAIN_FUNC  go to state 51


State 38

   42 FUNCS: FUNC . FUNCS

    is_fun  shift, and go to state 36

    $default  reduce using rule 43 (FUNCS)

    FUNCS  go to state 52
    FUNC   go to state 38


State 39

   34 DEF_FUNCS: DEF_FUNC end . DEF_FUNCS

    is_fun  shift, and go to state 24

    is_fun    [reduce using rule 35 (DEF_FUNCS)]
    $default  reduce using rule 35 (DEF_FUNCS)

    DEF_FUNCS  go to state 53
    DEF_FUNC   go to state 26


State 40

    6 VARS: VAR end VARS .

    $default  reduce using rule 6 (VARS)


State 41

   10 DECLARE: TYPE var_name ASSIGN .

    $default  reduce using rule 10 (DECLARE)


State 42

   11 ASSIGN: EXP .
   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP

    add   shift, and go to state 31
    sub   shift, and go to state 32
    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 11 (ASSIGN)


State 43

   17 EXP: open_par EXP close_par .

    $default  reduce using rule 17 (EXP)


State 44

   19 OP: EXP . add EXP
   19   | EXP add EXP .
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP

    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 19 (OP)


State 45

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   20   | EXP sub EXP .
   21   | EXP . mult EXP
   22   | EXP . divi EXP

    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 20 (OP)


State 46

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   21   | EXP mult EXP .
   22   | EXP . divi EXP

    $default  reduce using rule 21 (OP)


State 47

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP
   22   | EXP divi EXP .

    $default  reduce using rule 22 (OP)


State 48

   36 DEF_FUNC: is_fun var_name TYPE . open_par ALL_ARGS close_par

    open_par  shift, and go to state 54


State 49

   44 FUNC: is_fun var_name . TYPE open_par ALL_ARGS close_par fuopen BODY fuclose

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    TYPE  go to state 55


State 50

   66 MAIN_FUNC: main_func . TYPE open_par ALL_ARGS close_par fuopen BODY fuclose

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    TYPE  go to state 56


State 51

    1 PROGRAM: DEF_VARS GLOB_VARS DEF_FUNCS FUNCS MAIN_FUNC .

    $default  reduce using rule 1 (PROGRAM)


State 52

   42 FUNCS: FUNC FUNCS .

    $default  reduce using rule 42 (FUNCS)


State 53

   34 DEF_FUNCS: DEF_FUNC end DEF_FUNCS .

    $default  reduce using rule 34 (DEF_FUNCS)


State 54

   36 DEF_FUNC: is_fun var_name TYPE open_par . ALL_ARGS close_par

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    $default  reduce using rule 38 (ALL_ARGS)

    TYPE      go to state 57
    ALL_ARGS  go to state 58
    ARGS      go to state 59
    ARG       go to state 60


State 55

   44 FUNC: is_fun var_name TYPE . open_par ALL_ARGS close_par fuopen BODY fuclose

    open_par  shift, and go to state 61


State 56

   66 MAIN_FUNC: main_func TYPE . open_par ALL_ARGS close_par fuopen BODY fuclose

    open_par  shift, and go to state 62


State 57

   41 ARG: TYPE . var_name

    var_name  shift, and go to state 63


State 58

   36 DEF_FUNC: is_fun var_name TYPE open_par ALL_ARGS . close_par

    close_par  shift, and go to state 64


State 59

   37 ALL_ARGS: ARGS .

    $default  reduce using rule 37 (ALL_ARGS)


State 60

   39 ARGS: ARG . comma ARGS
   40     | ARG .

    comma  shift, and go to state 65

    $default  reduce using rule 40 (ARGS)


State 61

   44 FUNC: is_fun var_name TYPE open_par . ALL_ARGS close_par fuopen BODY fuclose

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    $default  reduce using rule 38 (ALL_ARGS)

    TYPE      go to state 57
    ALL_ARGS  go to state 66
    ARGS      go to state 59
    ARG       go to state 60


State 62

   66 MAIN_FUNC: main_func TYPE open_par . ALL_ARGS close_par fuopen BODY fuclose

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    $default  reduce using rule 38 (ALL_ARGS)

    TYPE      go to state 57
    ALL_ARGS  go to state 67
    ARGS      go to state 59
    ARG       go to state 60


State 63

   41 ARG: TYPE var_name .

    $default  reduce using rule 41 (ARG)


State 64

   36 DEF_FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par .

    $default  reduce using rule 36 (DEF_FUNC)


State 65

   39 ARGS: ARG comma . ARGS

    t_string  shift, and go to state 7
    t_int     shift, and go to state 8

    TYPE  go to state 57
    ARGS  go to state 68
    ARG   go to state 60


State 66

   44 FUNC: is_fun var_name TYPE open_par ALL_ARGS . close_par fuopen BODY fuclose

    close_par  shift, and go to state 69


State 67

   66 MAIN_FUNC: main_func TYPE open_par ALL_ARGS . close_par fuopen BODY fuclose

    close_par  shift, and go to state 70


State 68

   39 ARGS: ARG comma ARGS .

    $default  reduce using rule 39 (ARGS)


State 69

   44 FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par . fuopen BODY fuclose

    fuopen  shift, and go to state 71


State 70

   66 MAIN_FUNC: main_func TYPE open_par ALL_ARGS close_par . fuopen BODY fuclose

    fuopen  shift, and go to state 72


State 71

   44 FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par fuopen . BODY fuclose

    t_string    shift, and go to state 7
    t_int       shift, and go to state 8
    t_scanf     shift, and go to state 73
    t_printf    shift, and go to state 74
    open_while  shift, and go to state 75
    open_if     shift, and go to state 76
    t_ret       shift, and go to state 77
    var_name    shift, and go to state 78

    $default  reduce using rule 47 (BODY)

    DECLARE     go to state 79
    REASSIGN    go to state 80
    TYPE        go to state 15
    BODY        go to state 81
    LINE        go to state 82
    CMD         go to state 83
    INC         go to state 84
    DEC         go to state 85
    PRINT       go to state 86
    SCAN        go to state 87
    RET         go to state 88
    BLOCK       go to state 89
    IFBLOCK     go to state 90
    WHILEBLOCK  go to state 91


State 72

   66 MAIN_FUNC: main_func TYPE open_par ALL_ARGS close_par fuopen . BODY fuclose

    t_string    shift, and go to state 7
    t_int       shift, and go to state 8
    t_scanf     shift, and go to state 73
    t_printf    shift, and go to state 74
    open_while  shift, and go to state 75
    open_if     shift, and go to state 76
    t_ret       shift, and go to state 77
    var_name    shift, and go to state 78

    $default  reduce using rule 47 (BODY)

    DECLARE     go to state 79
    REASSIGN    go to state 80
    TYPE        go to state 15
    BODY        go to state 92
    LINE        go to state 82
    CMD         go to state 83
    INC         go to state 84
    DEC         go to state 85
    PRINT       go to state 86
    SCAN        go to state 87
    RET         go to state 88
    BLOCK       go to state 89
    IFBLOCK     go to state 90
    WHILEBLOCK  go to state 91


State 73

   59 SCAN: t_scanf . open_par var_name close_par

    open_par  shift, and go to state 93


State 74

   58 PRINT: t_printf . open_par EXP close_par

    open_par  shift, and go to state 94


State 75

   65 WHILEBLOCK: open_while . EVALUATE end BODY close_while

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP       go to state 95
    OP        go to state 22
    EVALUATE  go to state 96


State 76

   64 IFBLOCK: open_if . EVALUATE end BODY close_if

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP       go to state 95
    OP        go to state 22
    EVALUATE  go to state 97


State 77

   60 RET: t_ret . EXP
   61    | t_ret .

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    $default  reduce using rule 61 (RET)

    EXP  go to state 98
    OP   go to state 22


State 78

   13 REASSIGN: var_name . EXP
   56 INC: var_name . increase
   57 DEC: var_name . decrease

    increase    shift, and go to state 99
    decrease    shift, and go to state 100
    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 23
    OP   go to state 22


State 79

   50 CMD: DECLARE .

    $default  reduce using rule 50 (CMD)


State 80

   49 CMD: REASSIGN .

    $default  reduce using rule 49 (CMD)


State 81

   44 FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par fuopen BODY . fuclose

    fuclose  shift, and go to state 101


State 82

   45 BODY: LINE . BODY

    t_string    shift, and go to state 7
    t_int       shift, and go to state 8
    t_scanf     shift, and go to state 73
    t_printf    shift, and go to state 74
    open_while  shift, and go to state 75
    open_if     shift, and go to state 76
    t_ret       shift, and go to state 77
    var_name    shift, and go to state 78

    $default  reduce using rule 47 (BODY)

    DECLARE     go to state 79
    REASSIGN    go to state 80
    TYPE        go to state 15
    BODY        go to state 102
    LINE        go to state 82
    CMD         go to state 83
    INC         go to state 84
    DEC         go to state 85
    PRINT       go to state 86
    SCAN        go to state 87
    RET         go to state 88
    BLOCK       go to state 89
    IFBLOCK     go to state 90
    WHILEBLOCK  go to state 91


State 83

   48 LINE: CMD . end

    end  shift, and go to state 103


State 84

   51 CMD: INC .

    $default  reduce using rule 51 (CMD)


State 85

   52 CMD: DEC .

    $default  reduce using rule 52 (CMD)


State 86

   53 CMD: PRINT .

    $default  reduce using rule 53 (CMD)


State 87

   54 CMD: SCAN .

    $default  reduce using rule 54 (CMD)


State 88

   55 CMD: RET .

    $default  reduce using rule 55 (CMD)


State 89

   46 BODY: BLOCK . BODY

    t_string    shift, and go to state 7
    t_int       shift, and go to state 8
    t_scanf     shift, and go to state 73
    t_printf    shift, and go to state 74
    open_while  shift, and go to state 75
    open_if     shift, and go to state 76
    t_ret       shift, and go to state 77
    var_name    shift, and go to state 78

    $default  reduce using rule 47 (BODY)

    DECLARE     go to state 79
    REASSIGN    go to state 80
    TYPE        go to state 15
    BODY        go to state 104
    LINE        go to state 82
    CMD         go to state 83
    INC         go to state 84
    DEC         go to state 85
    PRINT       go to state 86
    SCAN        go to state 87
    RET         go to state 88
    BLOCK       go to state 89
    IFBLOCK     go to state 90
    WHILEBLOCK  go to state 91


State 90

   62 BLOCK: IFBLOCK .

    $default  reduce using rule 62 (BLOCK)


State 91

   63 BLOCK: WHILEBLOCK .

    $default  reduce using rule 63 (BLOCK)


State 92

   66 MAIN_FUNC: main_func TYPE open_par ALL_ARGS close_par fuopen BODY . fuclose

    fuclose  shift, and go to state 105


State 93

   59 SCAN: t_scanf open_par . var_name close_par

    var_name  shift, and go to state 106


State 94

   58 PRINT: t_printf open_par . EXP close_par

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 107
    OP   go to state 22


State 95

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP
   25 EVALUATE: EXP . COMP EXP

    add      shift, and go to state 31
    sub      shift, and go to state 32
    mult     shift, and go to state 33
    divi     shift, and go to state 34
    equal    shift, and go to state 108
    neq      shift, and go to state 109
    seq      shift, and go to state 110
    smaller  shift, and go to state 111
    beq      shift, and go to state 112
    bigger   shift, and go to state 113

    COMP  go to state 114


State 96

   26 EVALUATE: EVALUATE . and EVALUATE
   27         | EVALUATE . or EVALUATE
   65 WHILEBLOCK: open_while EVALUATE . end BODY close_while

    and  shift, and go to state 115
    or   shift, and go to state 116
    end  shift, and go to state 117


State 97

   26 EVALUATE: EVALUATE . and EVALUATE
   27         | EVALUATE . or EVALUATE
   64 IFBLOCK: open_if EVALUATE . end BODY close_if

    and  shift, and go to state 115
    or   shift, and go to state 116
    end  shift, and go to state 118


State 98

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP
   60 RET: t_ret EXP .

    add   shift, and go to state 31
    sub   shift, and go to state 32
    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 60 (RET)


State 99

   56 INC: var_name increase .

    $default  reduce using rule 56 (INC)


State 100

   57 DEC: var_name decrease .

    $default  reduce using rule 57 (DEC)


State 101

   44 FUNC: is_fun var_name TYPE open_par ALL_ARGS close_par fuopen BODY fuclose .

    $default  reduce using rule 44 (FUNC)


State 102

   45 BODY: LINE BODY .

    $default  reduce using rule 45 (BODY)


State 103

   48 LINE: CMD end .

    $default  reduce using rule 48 (LINE)


State 104

   46 BODY: BLOCK BODY .

    $default  reduce using rule 46 (BODY)


State 105

   66 MAIN_FUNC: main_func TYPE open_par ALL_ARGS close_par fuopen BODY fuclose .

    $default  reduce using rule 66 (MAIN_FUNC)


State 106

   59 SCAN: t_scanf open_par var_name . close_par

    close_par  shift, and go to state 119


State 107

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP
   58 PRINT: t_printf open_par EXP . close_par

    add        shift, and go to state 31
    sub        shift, and go to state 32
    mult       shift, and go to state 33
    divi       shift, and go to state 34
    close_par  shift, and go to state 120


State 108

   28 COMP: equal .

    $default  reduce using rule 28 (COMP)


State 109

   29 COMP: neq .

    $default  reduce using rule 29 (COMP)


State 110

   33 COMP: seq .

    $default  reduce using rule 33 (COMP)


State 111

   31 COMP: smaller .

    $default  reduce using rule 31 (COMP)


State 112

   32 COMP: beq .

    $default  reduce using rule 32 (COMP)


State 113

   30 COMP: bigger .

    $default  reduce using rule 30 (COMP)


State 114

   25 EVALUATE: EXP COMP . EXP

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP  go to state 121
    OP   go to state 22


State 115

   26 EVALUATE: EVALUATE and . EVALUATE

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP       go to state 95
    OP        go to state 22
    EVALUATE  go to state 122


State 116

   27 EVALUATE: EVALUATE or . EVALUATE

    open_par    shift, and go to state 17
    int_var     shift, and go to state 18
    string_var  shift, and go to state 19
    var_name    shift, and go to state 20

    EXP       go to state 95
    OP        go to state 22
    EVALUATE  go to state 123


State 117

   65 WHILEBLOCK: open_while EVALUATE end . BODY close_while

    t_string    shift, and go to state 7
    t_int       shift, and go to state 8
    t_scanf     shift, and go to state 73
    t_printf    shift, and go to state 74
    open_while  shift, and go to state 75
    open_if     shift, and go to state 76
    t_ret       shift, and go to state 77
    var_name    shift, and go to state 78

    $default  reduce using rule 47 (BODY)

    DECLARE     go to state 79
    REASSIGN    go to state 80
    TYPE        go to state 15
    BODY        go to state 124
    LINE        go to state 82
    CMD         go to state 83
    INC         go to state 84
    DEC         go to state 85
    PRINT       go to state 86
    SCAN        go to state 87
    RET         go to state 88
    BLOCK       go to state 89
    IFBLOCK     go to state 90
    WHILEBLOCK  go to state 91


State 118

   64 IFBLOCK: open_if EVALUATE end . BODY close_if

    t_string    shift, and go to state 7
    t_int       shift, and go to state 8
    t_scanf     shift, and go to state 73
    t_printf    shift, and go to state 74
    open_while  shift, and go to state 75
    open_if     shift, and go to state 76
    t_ret       shift, and go to state 77
    var_name    shift, and go to state 78

    $default  reduce using rule 47 (BODY)

    DECLARE     go to state 79
    REASSIGN    go to state 80
    TYPE        go to state 15
    BODY        go to state 125
    LINE        go to state 82
    CMD         go to state 83
    INC         go to state 84
    DEC         go to state 85
    PRINT       go to state 86
    SCAN        go to state 87
    RET         go to state 88
    BLOCK       go to state 89
    IFBLOCK     go to state 90
    WHILEBLOCK  go to state 91


State 119

   59 SCAN: t_scanf open_par var_name close_par .

    $default  reduce using rule 59 (SCAN)


State 120

   58 PRINT: t_printf open_par EXP close_par .

    $default  reduce using rule 58 (PRINT)


State 121

   19 OP: EXP . add EXP
   20   | EXP . sub EXP
   21   | EXP . mult EXP
   22   | EXP . divi EXP
   25 EVALUATE: EXP COMP EXP .

    add   shift, and go to state 31
    sub   shift, and go to state 32
    mult  shift, and go to state 33
    divi  shift, and go to state 34

    $default  reduce using rule 25 (EVALUATE)


State 122

   26 EVALUATE: EVALUATE . and EVALUATE
   26         | EVALUATE and EVALUATE .
   27         | EVALUATE . or EVALUATE

    or  shift, and go to state 116

    $default  reduce using rule 26 (EVALUATE)


State 123

   26 EVALUATE: EVALUATE . and EVALUATE
   27         | EVALUATE . or EVALUATE
   27         | EVALUATE or EVALUATE .

    $default  reduce using rule 27 (EVALUATE)


State 124

   65 WHILEBLOCK: open_while EVALUATE end BODY . close_while

    close_while  shift, and go to state 126


State 125

   64 IFBLOCK: open_if EVALUATE end BODY . close_if

    close_if  shift, and go to state 127


State 126

   65 WHILEBLOCK: open_while EVALUATE end BODY close_while .

    $default  reduce using rule 65 (WHILEBLOCK)


State 127

   64 IFBLOCK: open_if EVALUATE end BODY close_if .

    $default  reduce using rule 64 (IFBLOCK)
